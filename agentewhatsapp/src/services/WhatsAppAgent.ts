import twilio from 'twilio';
import { OpenAI } from 'openai';
import { MCPClient } from './MCPClient';
import { ConversationManager } from './ConversationManager';
import { Logger } from '../utils/Logger';
import { MessageParser } from '../utils/MessageParser';
import { ResponseGenerator } from '../utils/ResponseGenerator';

interface IncomingMessage {
  from: string;
  body: string;
  messageId: string;
  profileName: string;
  timestamp?: Date;
  isVoiceMessage?: boolean;
  mediaUrl?: string;
  mediaContentType?: string;
}

interface ConversationStats {
  totalMessages: number;
  activeConversations: number;
  avgResponseTime: number;
  successRate: number;
  emergencyContacts: number;
  appointmentsScheduled: number;
}

export class WhatsAppAgent {
  private twilioClient!: twilio.Twilio;
  private openaiClient!: OpenAI;
  private mcpClient!: MCPClient;
  private conversationManager: ConversationManager;
  private logger: Logger;
  private messageParser: MessageParser;
  private responseGenerator: ResponseGenerator;
  private stats!: ConversationStats;

  constructor() {
    this.logger = Logger.getInstance();
    this.initializeClients();
    this.conversationManager = new ConversationManager();
    this.messageParser = new MessageParser();
    this.responseGenerator = new ResponseGenerator();
    this.initializeStats();
  }

  private initializeClients() {
    // Inicializar cliente de Twilio
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    
    if (!accountSid || !authToken) {
      throw new Error('Credenciales de Twilio no configuradas');
    }
    
    this.twilioClient = twilio(accountSid, authToken);
    
    // Inicializar cliente de OpenAI
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (!openaiApiKey) {
      throw new Error('API Key de OpenAI no configurada');
    }
    
    this.openaiClient = new OpenAI({
      apiKey: openaiApiKey
    });
    
    // Inicializar cliente MCP
    this.mcpClient = new MCPClient(
      process.env.MCP_SERVER_URL || 'https://biosanarcall.site/mcp-inspector'
    );
  }

  private initializeStats() {
    this.stats = {
      totalMessages: 0,
      activeConversations: 0,
      avgResponseTime: 0,
      successRate: 0,
      emergencyContacts: 0,
      appointmentsScheduled: 0
    };
  }

  async initialize(): Promise<void> {
    try {
      this.logger.info('Inicializando WhatsApp Agent...');
      
      // Verificar conexi√≥n con MCP
      await this.mcpClient.testConnection();
      this.logger.info('‚úÖ Conexi√≥n MCP establecida');
      
      // Verificar credenciales de Twilio
      await this.twilioClient.api.accounts(process.env.TWILIO_ACCOUNT_SID!).fetch();
      this.logger.info('‚úÖ Credenciales Twilio verificadas');
      
      // Verificar OpenAI
      await this.openaiClient.models.list();
      this.logger.info('‚úÖ API de OpenAI verificada');
      
      this.logger.info('üöÄ WhatsApp Agent inicializado correctamente');
    } catch (error) {
      this.logger.error('Error inicializando WhatsApp Agent', { error });
      throw error;
    }
  }

  async processIncomingMessage(message: IncomingMessage): Promise<string | null> {
    const startTime = Date.now();
    
    try {
      this.stats.totalMessages++;
      
      // Obtener n√∫mero de tel√©fono limpio
      const phoneNumber = this.extractPhoneNumber(message.from);
      const sessionId = `whatsapp_${phoneNumber}`;
      
      this.logger.info('Procesando mensaje entrante', {
        from: phoneNumber,
        messageLength: message.body.length,
        profileName: message.profileName
      });

      // Analizar el mensaje
      const messageAnalysis = MessageParser.parse(message.body);
      
      // Verificar si es una emergencia
      if (messageAnalysis.type === 'emergency') {
        return await this.handleEmergency(message, phoneNumber);
      }

      // Obtener o crear conversaci√≥n
      let conversation = await this.conversationManager.getConversation(sessionId);
      
      if (!conversation) {
        // Inicializar memoria en MCP
        await this.mcpClient.initializeMemory(sessionId, 'whatsapp_consultation');
        conversation = await this.conversationManager.createConversation(sessionId, phoneNumber, message.profileName);
      }

      // Agregar mensaje a la memoria
      await this.mcpClient.addToMemory(
        sessionId,
        'message',
        message.body,
        'user_input',
        { phoneNumber, profileName: message.profileName, analysis: messageAnalysis }
      );

      // Determinar la intenci√≥n del usuario
      const intent = await this.determineUserIntent(message.body, conversation);
      
      // Generar respuesta basada en la intenci√≥n
      const response = await this.generateContextualResponse(
        message.body,
        intent,
        conversation,
        messageAnalysis
      );

      // Enviar respuesta
      if (response) {
        await this.sendMessage(message.from, response);
        
        // Agregar respuesta a la memoria
        await this.mcpClient.addToMemory(
          sessionId,
          'response',
          response,
          'agent_response',
          { intent, timestamp: new Date().toISOString() }
        );

        // Actualizar conversaci√≥n
        await this.conversationManager.updateConversation(sessionId, {
          lastMessage: message.body,
          lastResponse: response,
          lastActivity: new Date(),
          messageCount: conversation.messageCount + 1
        });
      }

      // Actualizar estad√≠sticas
      const responseTime = Date.now() - startTime;
      this.updateStats(responseTime, true);

      return response;
    } catch (error) {
      this.logger.error('Error procesando mensaje', { error, message });
      this.updateStats(Date.now() - startTime, false);
      
      // Enviar mensaje de error amigable con informaci√≥n √∫til inmediata
      const errorResponse = `Disculpa, hay una dificultad t√©cnica moment√°nea. Mientras tanto, puedes contactarnos directamente:

üè• **SEDE SAN GIL:**
üìû 6076911308
üìç Cra. 9 #10-29, San Gil, Santander
üïí Lunes a Viernes 7am-6pm | Urgencias 24/7

üè• **SEDE SOCORRO:**
üìû 77249700  
üìç Calle 12 #13-31, Socorro, Santander
üïí Lunes a viernes 7am-6pm

Para emergencias m√©dicas, acude inmediatamente a nuestra sede de San Gil que cuenta con atenci√≥n 24 horas.`;
      await this.sendMessage(message.from, errorResponse);
      
      return null;
    }
  }

  private async handleEmergency(message: IncomingMessage, phoneNumber: string): Promise<string> {
    this.stats.emergencyContacts++;
    
    this.logger.warn('EMERGENCIA DETECTADA', {
      from: phoneNumber,
      message: message.body,
      profileName: message.profileName
    });

    // Buscar paciente en la base de datos
    const patientInfo = await this.mcpClient.searchPatients(phoneNumber);
    
    const emergencyResponse = `üö® EMERGENCIA DETECTADA üö®

Hola ${message.profileName}, he detectado que tu mensaje indica una emergencia m√©dica.

${patientInfo ? `Te hemos identificado como: ${patientInfo.name}` : 'Para tu seguridad, por favor identif√≠cate.'}

Por favor:
1Ô∏è‚É£ Si es una emergencia que pone en riesgo la vida, llama INMEDIATAMENTE al 123
2Ô∏è‚É£ Para urgencias m√©dicas, contacta a nuestro n√∫mero de emergencias: ${process.env.EMERGENCY_PHONE}
3Ô∏è‚É£ Proporciona tu ubicaci√≥n exacta

Estoy notificando a nuestro equipo m√©dico de emergencias.

¬øNecesitas que contacte a alg√∫n familiar o conocido?`;

    // Notificar al equipo m√©dico (aqu√≠ podr√≠as integrar con un sistema de alertas)
    await this.notifyEmergencyTeam(message, phoneNumber, patientInfo);

    return emergencyResponse;
  }

  private async determineUserIntent(message: string, conversation: any): Promise<string> {
    try {
      const prompt = `
Analiza el siguiente mensaje de WhatsApp de un paciente y determina la intenci√≥n principal.
Contexto de conversaci√≥n: ${conversation.messageCount} mensajes previos.

Mensaje: "${message}"

Intenciones posibles:
- greeting: Saludo inicial
- appointment_request: Solicitar cita m√©dica
- appointment_modify: Modificar cita existente
- patient_registration: Registrar nuevo paciente o completar datos personales
- specialty_inquiry: Consulta sobre especialidades m√©dicas
- doctor_availability: Consulta de disponibilidad m√©dica
- eps_inquiry: Informaci√≥n sobre EPS y seguros
- document_inquiry: Informaci√≥n sobre documentos requeridos
- location_inquiry: Informaci√≥n sobre ubicaciones y sedes
- symptom_inquiry: Consulta sobre s√≠ntomas
- prescription_refill: Renovar receta m√©dica
- test_results: Preguntar por resultados de ex√°menes
- general_info: Informaci√≥n general sobre servicios
- payment_inquiry: Consultas sobre pagos o facturaci√≥n
- complaint: Quejas o reclamos
- emergency: Situaci√≥n de emergencia m√©dica
- goodbye: Despedida

Responde solo con la intenci√≥n identificada.`;

      const response = await this.openaiClient.chat.completions.create({
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 50,
        temperature: 0.1
      });

      return response.choices[0]?.message?.content?.trim().toLowerCase() || 'general_info';
    } catch (error) {
      this.logger.error('Error determinando intenci√≥n', { error });
      return 'general_info';
    }
  }

  private async generateContextualResponse(
    message: string,
    intent: string,
    conversation: any,
    analysis: any
  ): Promise<string> {
    try {
      const sessionId = conversation.sessionId;
      
      // Obtener memoria de la conversaci√≥n
      const memoryData = await this.mcpClient.getMemory(sessionId);
      
      // Generar contexto para ChatGPT
      const systemPrompt = await this.buildDynamicSystemPrompt(intent, conversation, memoryData, sessionId);

      const userPrompt = `Mensaje del paciente: "${message}"

IMPORTANTE: Responde de manera inmediata y √∫til. No uses frases como "perm√≠teme un momento", "dame un momento" o similares. Proporciona informaci√≥n espec√≠fica y opciones concretas basadas en tu conocimiento actualizado de sedes, especialidades y m√©dicos.`;

      const response = await this.openaiClient.chat.completions.create({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 600,
        temperature: 0.5
      });

      let aiResponse = response.choices[0]?.message?.content?.trim() || 'Lo siento, no pude procesar tu mensaje. ¬øPodr√≠as reformularlo?';

      // Post-procesar respuesta para intenciones espec√≠ficas
      this.logger.info('Intent detectado:', { intent });
      
      if (intent === 'appointment_request') {
        aiResponse = await this.enhanceAppointmentResponse(aiResponse, sessionId);
      } else if (intent === 'patient_registration') {
        this.logger.info('üîç Procesando registro de paciente', { message, sessionId });
        aiResponse = await this.handlePatientRegistration(message, sessionId, memoryData);
      } else if (intent === 'symptom_inquiry') {
        aiResponse = await this.enhanceSymptomResponse(aiResponse, sessionId);
      } else if (intent === 'location_inquiry') {
        aiResponse = await this.enhanceLocationResponse(aiResponse, sessionId);
      } else if (intent === 'eps_inquiry') {
        aiResponse = await this.enhanceEPSResponse(aiResponse, sessionId);
      } else if (intent === 'document_inquiry') {
        aiResponse = await this.enhanceDocumentResponse(aiResponse, sessionId);
      }
      // Nota: specialty_inquiry removido para evitar duplicaci√≥n - la informaci√≥n ya est√° en buildDynamicSystemPrompt

      return aiResponse;
    } catch (error) {
      this.logger.error('Error generando respuesta contextual', { error });
      return 'Disculpa, tengo dificultades para procesar tu mensaje. ¬øPodr√≠as intentar nuevamente?';
    }
  }

  private async enhanceAppointmentResponse(response: string, sessionId: string): Promise<string> {
    try {
      // Consultar disponibilidades del d√≠a
      const today = new Date().toISOString().split('T')[0];
      const availabilities = await this.mcpClient.searchAvailabilities(today);
      
      if (availabilities && availabilities.length > 0) {
        const availableSlots = availabilities.slice(0, 3).map((slot: any) => 
          `üìÖ ${slot.date} a las ${slot.start_time} - Dr. ${slot.doctor_name}`
        ).join('\n');
        
        response += `\n\nDisponibilidad hoy:\n${availableSlots}\n\n¬øTe interesa alguno de estos horarios?`;
      }
      
      return response;
    } catch (error) {
      this.logger.error('Error mejorando respuesta de citas', { error });
      return response;
    }
  }

  private async enhanceSymptomResponse(response: string, sessionId: string): Promise<string> {
    try {
      // Agregar disclaimers m√©dicos
      const disclaimer = '\n\n‚ö†Ô∏è *Importante*: Esta informaci√≥n es orientativa. Para un diagn√≥stico preciso, consulta con un m√©dico.';
      
      return response + disclaimer;
    } catch (error) {
      this.logger.error('Error mejorando respuesta de s√≠ntomas', { error });
      return response;
    }
  }

  private async handlePatientRegistration(message: string, sessionId: string, memoryData: any): Promise<string> {
    try {
      // Extraer informaci√≥n del mensaje (nombre y documento) - VERSI√ìN MEJORADA
      const nameMatch = message.match(/(?:soy|llamo|nombre es|me llamo)\s+([A-Za-z\s√°√©√≠√≥√∫√±√º]+?)(?:\s*,|\s*y|\s*con|\s*c[e√©]dula|\s*documento|\s*el|\s*mi|\s*$)/i);
      const documentMatch = message.match(/(?:c[e√©]dula|documento|cedula|cc|identificaci[o√≥]n)?\s*:?\s*(\d{7,12})/i);
      
      // Patrones mejorados para diferentes formatos
      const formats = [
        // "Nombre Apellido 12345678" (nombre seguido de n√∫meros)
        { pattern: /^([A-Za-z\s√°√©√≠√≥√∫√±√º]+?)\s+(\d{7,12})$/i, nameGroup: 1, docGroup: 2 },
        // "12345678 Nombre Apellido" (documento seguido de nombre)  
        { pattern: /^(\d{7,12})\s+([A-Za-z\s√°√©√≠√≥√∫√±√º]+)$/i, nameGroup: 2, docGroup: 1 },
        // "Nombre, 12345678" (con coma)
        { pattern: /^([A-Za-z\s√°√©√≠√≥√∫√±√º]+),\s*(\d{7,12})$/i, nameGroup: 1, docGroup: 2 },
        // "12345678, Nombre" (documento con coma)
        { pattern: /^(\d{7,12}),\s*([A-Za-z\s√°√©√≠√≥√∫√±√º]+)$/i, nameGroup: 2, docGroup: 1 }
      ];
      
      let extractedName = '';
      let extractedDocument = '';
      
      // Probar todos los patrones
      for (const format of formats) {
        const match = message.match(format.pattern);
        if (match) {
          extractedName = match[format.nameGroup].trim();
          extractedDocument = match[format.docGroup].trim();
          console.log(`‚úÖ Patr√≥n detectado: ${format.pattern}`, { extractedName, extractedDocument });
          break;
        }
      }
      
      // Si no encontramos con patrones combinados, buscar individualmente
      if (!extractedName && !extractedDocument) {
        if (nameMatch) extractedName = nameMatch[1].trim();
        if (documentMatch) extractedDocument = documentMatch[1].trim();
        
        // Buscar solo nombre si es texto sin n√∫meros
        if (!extractedName && /^[A-Za-z\s√°√©√≠√≥√∫√±√º]+$/.test(message.trim())) {
          extractedName = message.trim();
          console.log('‚úÖ Solo nombre detectado:', extractedName);
        }
        
        // Buscar solo documento si es solo n√∫meros
        if (!extractedDocument && /^\d{7,12}$/.test(message.trim())) {
          extractedDocument = message.trim();
          console.log('‚úÖ Solo documento detectado:', extractedDocument);
        }
      }
      
      // Limpiar y normalizar nombre
      if (extractedName) {
        extractedName = extractedName.replace(/[^\w\s√°√©√≠√≥√∫√±√º]/gi, '').trim();
        extractedName = extractedName.replace(/\s+/g, ' '); // Normalizar espacios
        // Capitalizar primera letra de cada palabra
        extractedName = extractedName.split(' ').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
        ).join(' ');
      }
      
      // Limpiar documento (solo n√∫meros)
      if (extractedDocument) {
        extractedDocument = extractedDocument.replace(/\D/g, '');
      }
      
      console.log('üìù Datos extra√≠dos del mensaje:', { extractedName, extractedDocument });
      
      // Revisar memoria para ver si tenemos informaci√≥n previa
      let storedName = '';
      let storedDocument = '';
      
      if (memoryData && memoryData.conversation_data) {
        try {
          const conversation = JSON.parse(memoryData.conversation_data);
          storedName = conversation.patient_name || '';
          storedDocument = conversation.patient_document || '';
        } catch (e) {
          // Si no se puede parsear, continuar sin memoria
        }
      }
      
      // Combinar informaci√≥n actual con la almacenada
      const finalName = extractedName || storedName;
      const finalDocument = extractedDocument || storedDocument;
      
      // Actualizar memoria con nueva informaci√≥n
      const memoryUpdate: any = {};
      if (extractedName) memoryUpdate.patient_name = extractedName;
      if (extractedDocument) memoryUpdate.patient_document = extractedDocument;
      
      if (Object.keys(memoryUpdate).length > 0) {
        await this.mcpClient.addToMemory(
          sessionId,
          'patient_data',
          JSON.stringify(memoryUpdate),
          'patient_info'
        );
      }
      
      // Si tenemos nombre y documento, proceder con el registro
      if (finalName && finalDocument) {
        this.logger.info('Intentando registrar paciente', { 
          name: finalName, 
          document: finalDocument,
          sessionId 
        });
        
        try {
          const registrationResult = await this.mcpClient.createSimplePatient({
            name: finalName,
            document: finalDocument
          });
          
          if (registrationResult && !registrationResult.error) {
            this.logger.info('Paciente registrado exitosamente', { 
              patientId: registrationResult.id,
              name: finalName,
              document: finalDocument 
            });
            
            return `‚úÖ **¬°Registro Completado!**

¬°Perfecto! He registrado exitosamente a **${finalName}** con el n√∫mero de documento **${finalDocument}** en nuestro sistema Biosanar. üòä

üìã **Informaci√≥n registrada:**
‚Ä¢ **Nombre:** ${finalName}
‚Ä¢ **Documento:** ${finalDocument}
‚Ä¢ **ID del paciente:** ${registrationResult.id || 'Asignado'}

‚ú® **Ahora puedes:**
‚Ä¢ Agendar citas m√©dicas
‚Ä¢ Consultar tus citas programadas  
‚Ä¢ Hacer consultas m√©dicas con nuestros especialistas

üè• **Disponemos de:**
‚Ä¢ 12 especialidades m√©dicas
‚Ä¢ Sedes en San Gil y Socorro
‚Ä¢ Horarios flexibles

¬øTe gustar√≠a agendar una cita m√©dica ahora? üìÖ`;
          } else {
            this.logger.error('Error en el registro de paciente', { 
              error: registrationResult?.error,
              name: finalName,
              document: finalDocument 
            });
            
            return `‚ùå **Error en el Registro**

Lo siento, hubo un problema al registrarte en el sistema:
${registrationResult?.error || 'Error desconocido'}

Por favor, intenta nuevamente o contacta con nuestro soporte.`;
          }
        } catch (error) {
          this.logger.error('Excepci√≥n durante el registro de paciente', { 
            error: error,
            name: finalName,
            document: finalDocument 
          });
          
          return `‚ùå **Error T√©cnico**

Lo siento, no pude completar tu registro en este momento debido a un error t√©cnico.

Por favor, intenta nuevamente en unos minutos o contacta con nuestro soporte.`;
        }
      } else {
        // Solicitar informaci√≥n faltante
        if (!finalName && !finalDocument) {
          return `üìù **Registro de Nuevo Paciente**

¬°Excelente! Te ayudo a registrarte en nuestro sistema.

Para completar tu registro, solo necesito 2 datos b√°sicos:

üë§ **Tu nombre completo**
üÜî **Tu n√∫mero de documento**

Por favor comp√°rtelos conmigo.`;
        } else if (!finalName) {
          return `üë§ **Necesito tu Nombre**

Ya tengo tu n√∫mero de documento: **${finalDocument}**

Solo me falta tu nombre completo para completar el registro.

¬øCu√°l es tu nombre completo?`;
        } else if (!finalDocument) {
          return `üÜî **Necesito tu Documento**

Ya tengo tu nombre: **${finalName}**

Solo me falta tu n√∫mero de c√©dula para completar el registro.

¬øCu√°l es tu n√∫mero de documento?`;
        }
      }
      
      return 'Por favor proporciona tu nombre completo y n√∫mero de documento para registrarte.';
      
    } catch (error) {
      this.logger.error('Error manejando registro de paciente', { error, sessionId });
      return 'Lo siento, hubo un error procesando tu registro. Por favor intenta nuevamente.';
    }
  }

  async sendMessage(to: string, message: string): Promise<any> {
    try {
      const result = await this.twilioClient.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER!,
        to: to,
        body: message
      });

      this.logger.info('Mensaje enviado exitosamente', {
        to: to,
        messageId: result.sid,
        messageLength: message.length
      });

      return result;
    } catch (error) {
      this.logger.error('Error enviando mensaje', { error, to, message });
      throw error;
    }
  }

  private extractPhoneNumber(from: string): string {
    // Extraer n√∫mero de tel√©fono del formato whatsapp:+1234567890
    return from.replace('whatsapp:', '').replace('+', '');
  }

  private async notifyEmergencyTeam(message: IncomingMessage, phoneNumber: string, patientInfo: any): Promise<void> {
    // Aqu√≠ puedes implementar notificaciones al equipo m√©dico
    // Por ejemplo: email, SMS, webhook a sistema hospitalario, etc.
    this.logger.warn('NOTIFICACI√ìN DE EMERGENCIA', {
      patient: patientInfo?.name || 'Desconocido',
      phone: phoneNumber,
      message: message.body,
      timestamp: new Date().toISOString()
    });
  }

  private updateStats(responseTime: number, success: boolean): void {
    // Actualizar tiempo promedio de respuesta
    this.stats.avgResponseTime = (this.stats.avgResponseTime + responseTime) / 2;
    
    // Actualizar tasa de √©xito
    if (success) {
      this.stats.successRate = ((this.stats.successRate * (this.stats.totalMessages - 1)) + 100) / this.stats.totalMessages;
    } else {
      this.stats.successRate = (this.stats.successRate * (this.stats.totalMessages - 1)) / this.stats.totalMessages;
    }
  }

  async getStats(): Promise<ConversationStats> {
    this.stats.activeConversations = await this.conversationManager.getActiveConversationsCount();
    return { ...this.stats };
  }

  private async buildDynamicSystemPrompt(intent: string, conversation: any, memoryData: any, sessionId: string): Promise<string> {
    try {
      // Consultar din√°micamente informaci√≥n actualizada del MCP
      const [locationsData, specialtiesData] = await Promise.all([
        this.mcpClient.getLocations(),
        this.mcpClient.getSpecialties()
      ]);

      // Construir informaci√≥n de sedes din√°micamente
      let sedesInfo = 'INFORMACI√ìN DE NUESTRAS SEDES:\n\n';
      
      if (locationsData?.locations?.length > 0) {
        locationsData.locations.forEach((location: any) => {
          sedesInfo += `üè• ${location.name.toUpperCase()}:\n`;
          sedesInfo += `üìç Direcci√≥n: ${location.address}\n`;
          sedesInfo += `üìû Tel√©fono: ${location.phone}\n`;
          if (location.capacity) {
            sedesInfo += `üë• Capacidad: ${location.capacity} pacientes activos\n`;
          }
          if (location.hours) {
            sedesInfo += `üïí Horarios: ${location.hours}\n`;
          }
          if (location.emergency_hours) {
            sedesInfo += `üö® Urgencias: ${location.emergency_hours}\n`;
          }
          sedesInfo += '\n';
        });
      } else {
        sedesInfo += 'üè• Informaci√≥n de sedes en actualizaci√≥n. Contacta directamente para detalles.\n\n';
      }

      // Construir informaci√≥n de especialidades din√°micamente
      let especialidadesInfo = 'ESPECIALIDADES M√âDICAS DISPONIBLES:\n\n';
      
      if (specialtiesData?.specialties?.length > 0) {
        // Ordenar alfab√©ticamente para presentaci√≥n consistente
        const sortedSpecialties = specialtiesData.specialties.sort((a: any, b: any) => 
          a.name.localeCompare(b.name)
        );

        // Agrupar por primera letra para mejor organizaci√≥n
        const specialtiesByLetter = sortedSpecialties.reduce((acc: any, specialty: any) => {
          const firstLetter = specialty.name.charAt(0).toUpperCase();
          if (!acc[firstLetter]) {
            acc[firstLetter] = [];
          }
          acc[firstLetter].push(specialty);
          return acc;
        }, {});

        // Mostrar todas las especialidades organizadas alfab√©ticamente
        Object.keys(specialtiesByLetter).sort().forEach(letter => {
          especialidadesInfo += `**${letter}:**\n`;
          specialtiesByLetter[letter].forEach((spec: any) => {
            especialidadesInfo += `‚Ä¢ **${spec.name}** (${spec.default_duration_minutes} min)`;
            if (spec.description && spec.description !== spec.name) {
              especialidadesInfo += ` - ${spec.description}`;
            }
            especialidadesInfo += '\n';
          });
          especialidadesInfo += '\n';
        });

        especialidadesInfo += `**INFORMACI√ìN IMPORTANTE:**\n`;
        especialidadesInfo += `- Total de especialidades activas: ${specialtiesData.specialties.length}\n`;
        especialidadesInfo += `- Todas las especialidades est√°n disponibles en nuestras sedes\n`;
        especialidadesInfo += `- Sistema de citas online disponible las 24 horas\n`;
        especialidadesInfo += `- Para casos urgentes, contamos con servicio de emergencias\n\n`;
      } else {
        especialidadesInfo += 'ü©∫ Informaci√≥n de especialidades en actualizaci√≥n. Contacta directamente para detalles.\n\n';
      }

      // Construir prompt completo
      const systemPrompt = `Eres Valeria, la asistente virtual de Biosanarcall - un sistema m√©dico especializado en San Gil y Socorro, Santander, Colombia.

${sedesInfo}

${especialidadesInfo}

CONTEXTO DE LA CONVERSACI√ìN:
- Paciente: ${conversation.patientName || 'Sin identificar'}
- Sesi√≥n: ${sessionId}
- Mensajes previos: ${conversation.messageCount}
- Intenci√≥n detectada: ${intent}
- Memoria: ${JSON.stringify(memoryData, null, 2)}

TU PERSONALIDAD Y COMPORTAMIENTO:
- S√© c√°lida, profesional y emp√°tica
- Usa emojis apropiados para hacer la conversaci√≥n m√°s amigable
- Mant√©n un tono conversacional pero informativo
- Siempre ofrece opciones espec√≠ficas cuando sea posible
- Si no tienes informaci√≥n espec√≠fica, ofrece contactar directamente

CAPACIDADES ESPECIALES:
- Puedes agendar citas consultando disponibilidad en tiempo real
- Tienes acceso a informaci√≥n de especialistas y horarios
- Puedes consultar informaci√≥n de EPS y tipos de documento
- Puedes proporcionar direcciones y datos de contacto de las sedes
- Puedes responder preguntas sobre servicios y procedimientos

INFORMACI√ìN DETALLADA DE M√âDICOS:
- SIEMPRE incluye nombre completo del m√©dico cuando menciones disponibilidad
- SIEMPRE especifica horarios de atenci√≥n (ma√±ana 8:00-12:00, tarde 14:00-17:00)
- SIEMPRE menciona la especialidad del m√©dico
- SIEMPRE indica en qu√© sede atiende el m√©dico
- Ejemplo correcto: "Dra. Ana Teresa Escobar (Medicina General) atiende en ma√±anas de 8:00 a 12:00 y tardes de 14:00 a 17:00 en nuestra sede de San Gil"

B√öSQUEDA INTELIGENTE DE M√âDICOS:
- Si alguien menciona solo un nombre (ej: "Doctor Carlos"), LISTA TODOS los m√©dicos con ese nombre
- Incluye nombre completo, especialidad y sede para cada coincidencia
- Sugiere b√∫squeda por especialidad si hay m√∫ltiples opciones
- Ejemplo: "Tenemos varios m√©dicos llamados Carlos: 1) Dr. Carlos Rafael Almira (Ginecolog√≠a) en San Gil, 2) Dr. Carlos Escorcia (Medicina General) en Socorro. ¬øCu√°l te interesa o prefieres buscar por especialidad?"
- Si no hay coincidencias exactas, sugiere nombres similares y b√∫squeda por especialidad

INSTRUCCIONES ESPEC√çFICAS:
- Para citas urgentes, prioriza las sedes con servicio de urgencias 24h
- Para consultas de rutina, ofrece ambas sedes seg√∫n conveniencia del paciente
- Siempre confirma datos importantes antes de agendar
- Si detectas una emergencia m√©dica, recomienda acudir inmediatamente a urgencias
- Mant√©n la confidencialidad y profesionalismo en todo momento

REGLAS CR√çTICAS DE RESPUESTA:
- NUNCA digas "Perm√≠teme un momento", "Dame un momento", "Espera mientras busco" o similares
- NUNCA pongas al paciente en espera - siempre da una respuesta inmediata
- SIEMPRE responde con informaci√≥n √∫til desde el primer mensaje
- Si necesitas informaci√≥n adicional, pide los datos espec√≠ficos que necesitas
- Proporciona opciones concretas y accionables en cada respuesta
- Si no tienes informaci√≥n completa, ofrece lo que s√≠ puedes proporcionar inmediatamente

REGLAS ANTI-ALUCINACI√ìN (MUY IMPORTANTE):
- SOLO usa nombres de m√©dicos que aparezcan EXACTAMENTE en los datos del MCP
- NUNCA inventes o modifiques nombres de m√©dicos (como "Dr. Carlos Mendoza" o "Dra. Laura Camila Mart√≠nez")
- SOLO menciona especialidades que existan realmente en la base de datos
- Si no hay m√©dicos para una especialidad, informa claramente que no est√°n disponibles
- SIEMPRE verifica que el m√©dico y especialidad coincidan con los datos reales
- Si dudas sobre un dato, mejor di que no tienes la informaci√≥n y ofrece contactar directamente

ESTILO DE RESPUESTA:
- Respuestas directas y √∫tiles desde el primer contacto
- Proporciona informaci√≥n inmediata basada en tu conocimiento actualizado
- Ofrece opciones espec√≠ficas y siguientes pasos claros
- Usa un tono amigable pero eficiente

EJEMPLOS DE RESPUESTAS CORRECTAS (SIN ESPERAS - SOLO DATOS REALES):
‚úÖ "Tenemos 12 especialidades disponibles en nuestras dos sedes..."
‚úÖ "Para Medicina General, tenemos a la Dra. Ana Teresa Escobar que atiende en San Gil."
‚úÖ "Te ayudo inmediatamente. Para Ginecolog√≠a tenemos al Dr. Carlos Rafael Almira que atiende en San Gil."
‚úÖ "Para agendar con el Dr. Alexander Rugeles (Medicina Familiar) necesito tu tipo y n√∫mero de documento. √âl atiende en San Gil."
‚úÖ "La Dra. Laura Juliana Morales Poveda (Odontolog√≠a) atiende en San Gil y Socorro. ¬øPrefieres alguna sede en particular?"
‚úÖ "Para Dermatolog√≠a tenemos al Dr. Erwin Alirio Vargas Ariza en nuestra sede de San Gil."

EJEMPLOS DE B√öSQUEDA POR NOMBRE:
‚úÖ "Tenemos varios m√©dicos llamados Carlos: 1) Dr. Carlos Rafael Almira (Ginecolog√≠a) en San Gil, 2) Dr. Calixto Escorcia Angulo (Medicina General) en Socorro. ¬øCu√°l te interesa?"
‚úÖ "Encontr√© estas opciones con el nombre Laura: Dra. Laura Juliana Morales Poveda (Odontolog√≠a) en San Gil y Socorro. ¬øEs la que buscas?"
‚úÖ "Para el nombre Alexander tenemos: Dr. Alexander Rugeles (Medicina Familiar) en San Gil. ¬øTe sirve esta informaci√≥n?"
‚úÖ "No encontr√© m√©dicos con el nombre 'Dave'. ¬øPodr√≠as especificar el nombre completo o prefieres buscar por especialidad?"

RESPUESTAS CUANDO NO HAY M√âDICOS DISPONIBLES:
‚úÖ "Lo siento, actualmente no tenemos cardi√≥logos registrados en nuestras sedes. Te sugiero contactar directamente con nuestras sedes para m√°s informaci√≥n."
‚úÖ "No encontr√© especialistas en esa √°rea en nuestro registro actual. ¬øTe interesa alguna otra especialidad que s√≠ tengamos disponible?"
‚úÖ "Para esa especialidad no tengo m√©dicos disponibles en este momento. Puedo ofrecerte informaci√≥n de contacto de nuestras sedes para consulta directa."

EJEMPLOS INCORRECTOS (NUNCA USES):
‚ùå "Perm√≠teme un momento mientras busco..."
‚ùå "Dame un segundo para consultar..."
‚ùå "Espera que reviso la informaci√≥n..."
‚ùå "Un momento por favor..."
‚ùå "Tenemos m√©dicos disponibles" (sin especificar nombres, horarios y especialidad)
‚ùå NUNCA inventes nombres de m√©dicos como "Dr. Carlos Mendoza" o "Dra. Laura Camila Mart√≠nez"
‚ùå NUNCA cambies nombres reales como cambiar "Laura Juliana Morales Poveda" por "Laura Camila Mart√≠nez"

ACCIONES DISPONIBLES (SOLO DATOS REALES):
- Programar citas: Usa searchAvailabilities del MCP para obtener horarios espec√≠ficos REALES
- Buscar pacientes: Usa searchPatients del MCP  
- Registrar pacientes nuevos: Usa createSimplePatient del MCP (ULTRA-SIMPLE: solo nombre completo y documento)
- Consultar m√©dicos: Usa getDoctors del MCP (incluye nombres, especialidades, sedes) - SOLO datos verificados
- Verificar disponibilidad: Usa getAvailabilities para horarios detallados (start_time, end_time, doctor_name, specialty_name, location_name)
- Si no hay datos disponibles: Informa claramente que no hay m√©dicos registrados en esa especialidad

IMPORTANTE PARA REGISTRO DE PACIENTES:
- SIEMPRE usa createSimplePatient (NO createPatient) para registro desde WhatsApp
- ULTRA-SIMPLE: Solo requiere 2 campos OBLIGATORIOS: nombre completo y n√∫mero de documento
- NO pidas tel√©fono, email, fecha nacimiento, ni otros datos - son INNECESARIOS
- El sistema auto-completa todos los dem√°s campos autom√°ticamente
- Despu√©s del registro exitoso, confirma al paciente que ya est√° registrado en el sistema

EJEMPLO DE USO:
Usuario: "Quiero registrarme, soy Juan P√©rez, c√©dula 12345678"
Agente: Usa createSimplePatient con {document: "12345678", name: "Juan P√©rez"}

PROTOCOLO DE VERIFICACI√ìN DE DATOS:
1. ANTES de mencionar un m√©dico, VERIFICA que existe en los datos del MCP
2. ANTES de mencionar una especialidad, CONFIRMA que hay m√©dicos registrados
3. Si no encuentras m√©dicos para una especialidad solicitada, di: "No tenemos [especialidad] registrada actualmente"
4. Si no est√°s seguro de un dato, di: "Te recomiendo contactar directamente con nuestras sedes"

PROTOCOLO PARA B√öSQUEDA POR NOMBRE:
1. Si mencionan solo un nombre (ej: "Doctor Carlos", "Doctora Laura"):
   - Busca TODOS los m√©dicos que contengan ese nombre en cualquier parte
   - Lista cada coincidencia con: Nombre completo, especialidad, sede
   - Pregunta cu√°l espec√≠ficamente le interesa
   - Sugiere b√∫squeda por especialidad como alternativa
2. Si no hay coincidencias:
   - Confirma que no tienes m√©dicos con ese nombre
   - Sugiere verificar el nombre completo o buscar por especialidad
   - Ofrece listar especialidades disponibles

FORMATO REQUERIDO PARA INFORMACI√ìN DE M√âDICOS (SOLO DATOS VERIFICADOS):
Cuando menciones m√©dicos disponibles, SIEMPRE incluye:
1. Nombre completo del m√©dico EXACTO del MCP (ej: "Dra. Ana Teresa Escobar")
2. Especialidad entre par√©ntesis EXACTA del MCP (ej: "(Medicina General)")  
3. Horarios espec√≠ficos basados en disponibilidades reales (ej: "ma√±anas 8:00-12:00, tardes 14:00-17:00")
4. Sede donde atiende REAL del MCP (ej: "en nuestra sede de San Gil")

Responde al siguiente mensaje del paciente:`;

      return systemPrompt;
    } catch (error) {
      this.logger.error('Error construyendo prompt din√°mico', { error });
      
      // Fallback a prompt b√°sico si hay error
      return `Eres Valeria, la asistente virtual de Biosanarcall. 
      
      Estoy experimentando dificultades t√©cnicas para acceder a la informaci√≥n actualizada de nuestras sedes y especialidades. 
      Para obtener informaci√≥n precisa sobre ubicaciones, horarios y especialidades disponibles, por favor contacta directamente con nuestras sedes.
      
      CONTEXTO DE LA CONVERSACI√ìN:
      - Paciente: ${conversation.patientName || 'Sin identificar'}
      - Sesi√≥n: ${sessionId}
      - Intenci√≥n detectada: ${intent}
      
      Responde de manera emp√°tica y profesional, ofreciendo contactar directamente para informaci√≥n espec√≠fica.`;
    }
  }

  private async enhanceSpecialtyResponse(response: string, sessionId: string): Promise<string> {
    try {
      const specialtiesData = await this.mcpClient.getSpecialties();
      
      if (specialtiesData?.specialties?.length > 0) {
        let categorizedInfo = '\n\n*üìã Especialidades M√©dicas Disponibles:*\n\n';
        
        // Ordenar alfab√©ticamente para presentaci√≥n consistente
        const sortedSpecialties = specialtiesData.specialties.sort((a: any, b: any) => 
          a.name.localeCompare(b.name)
        );

        // Mostrar todas las especialidades din√°micamente
        sortedSpecialties.forEach((spec: any) => {
          categorizedInfo += `‚Ä¢ **${spec.name}** (${spec.default_duration_minutes} min)`;
          if (spec.description && spec.description !== spec.name) {
            categorizedInfo += ` - ${spec.description}`;
          }
          categorizedInfo += '\n';
        });

        categorizedInfo += '\n*üí° Informaci√≥n importante:*\n';
        categorizedInfo += `‚Ä¢ Total de especialidades: ${specialtiesData.specialties.length}\n`;
        categorizedInfo += '‚Ä¢ Disponibles en todas nuestras sedes\n';
        categorizedInfo += '‚Ä¢ Citas disponibles online 24/7\n';

        return response + categorizedInfo;
      } else {
        return response + '\n\n*‚ÑπÔ∏è Para informaci√≥n espec√≠fica sobre especialidades, contacta directamente con nuestras sedes.*';
      }
    } catch (error) {
      this.logger.error('Error enriqueciendo respuesta de especialidades', { error });
      return response;
    }
  }

  private async enhanceLocationResponse(response: string, sessionId: string): Promise<string> {
    try {
      const locationsData = await this.mcpClient.getLocations();
      
      if (locationsData?.locations?.length > 0) {
        let locationInfo = '\n\n*üìç Informaci√≥n detallada de nuestras sedes:*\n\n';
        
        locationsData.locations.forEach((location: any) => {
          locationInfo += `*üè• ${location.name.toUpperCase()}*\n`;
          locationInfo += `üìç *Direcci√≥n:* ${location.address}\n`;
          locationInfo += `üìû *Tel√©fono:* ${location.phone}\n`;
          locationInfo += `üïí *Horarios:* ${location.operating_hours}\n`;
          
          if (location.services) {
            locationInfo += `üè• *Servicios:* ${location.services}\n`;
          }
          
          if (location.patient_capacity) {
            locationInfo += `üë• *Capacidad:* ${location.patient_capacity} pacientes\n`;
          }
          
          locationInfo += '\n';
        });
        
        locationInfo += '*üöó C√≥mo llegar:*\n';
        locationInfo += '‚Ä¢ Ambas sedes est√°n ubicadas en el centro de cada ciudad\n';
        locationInfo += '‚Ä¢ F√°cil acceso en transporte p√∫blico\n';
        locationInfo += '‚Ä¢ Parqueadero disponible\n';
        
        return response + locationInfo;
      } else {
        return response + '\n\n*‚ÑπÔ∏è Para informaci√≥n detallada sobre ubicaciones, contacta directamente con nuestras sedes.*';
      }
    } catch (error) {
      this.logger.error('Error enriqueciendo respuesta de ubicaciones', { error });
      return response;
    }
  }

  private async enhanceEPSResponse(response: string, sessionId: string): Promise<string> {
    try {
      const epsData = await this.mcpClient.getEPS();
      
      if (epsData?.eps?.length > 0) {
        let epsInfo = '\n\n*üìã EPS que atendemos:*\n';
        epsData.eps.forEach((eps: any) => {
          epsInfo += `‚Ä¢ ${eps.name}\n`;
        });
        
        epsInfo += '\n*‚ÑπÔ∏è Informaci√≥n importante:*\n';
        epsInfo += '‚Ä¢ Verifica que tu EPS est√© al d√≠a\n';
        epsInfo += '‚Ä¢ Trae tu carnet de afiliaci√≥n\n';
        epsInfo += '‚Ä¢ Algunos servicios pueden requerir autorizaci√≥n previa\n';
        epsInfo += '‚Ä¢ Para consultas particulares, consulta nuestras tarifas\n';
        
        return response + epsInfo;
      } else {
        return response + '\n\n*‚ÑπÔ∏è Para informaci√≥n espec√≠fica sobre tu EPS, contacta directamente con nuestras sedes.*';
      }
    } catch (error) {
      this.logger.error('Error enriqueciendo respuesta de EPS', { error });
      return response;
    }
  }

  private async enhanceDocumentResponse(response: string, sessionId: string): Promise<string> {
    try {
      const docTypes = await this.mcpClient.getDocumentTypes();
      
      if (docTypes?.document_types?.length > 0) {
        let docInfo = '\n\n*üìÑ Documentos de identificaci√≥n que aceptamos:*\n';
        docTypes.document_types.forEach((doc: any) => {
          docInfo += `‚Ä¢ ${doc.name} (${doc.code})\n`;
        });
        
        return response + docInfo;
      } else {
        return response + '\n\n*‚ÑπÔ∏è Aceptamos c√©dula de ciudadan√≠a, tarjeta de identidad, pasaporte y otros documentos oficiales.*';
      }
    } catch (error) {
      this.logger.error('Error enriqueciendo respuesta de documentos', { error });
      return response;
    }
  }
}