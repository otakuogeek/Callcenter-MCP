import twilio from 'twilio';
import { OpenAI } from 'openai';
import { MCPClient } from './MCPClient';
import { ConversationManager } from './ConversationManager';
import { Logger } from '../utils/Logger';
import { MessageParser } from '../utils/MessageParser';
import { ResponseGenerator } from '../utils/ResponseGenerator';

interface IncomingMessage {
  from: string;
  body: string;
  messageId: string;
  profileName: string;
}

interface ConversationStats {
  totalMessages: number;
  activeConversations: number;
  avgResponseTime: number;
  successRate: number;
  emergencyContacts: number;
  appointmentsScheduled: number;
}

export class WhatsAppAgent {
  private twilioClient!: twilio.Twilio;
  private openaiClient!: OpenAI;
  private mcpClient!: MCPClient;
  private conversationManager: ConversationManager;
  private logger: Logger;
  private messageParser: MessageParser;
  private responseGenerator: ResponseGenerator;
  private stats!: ConversationStats;

  constructor() {
    this.logger = Logger.getInstance();
    this.initializeClients();
    this.conversationManager = new ConversationManager();
    this.messageParser = new MessageParser();
    this.responseGenerator = new ResponseGenerator();
    this.initializeStats();
  }

  private initializeClients() {
    // Inicializar cliente de Twilio
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    
    if (!accountSid || !authToken) {
      throw new Error('Credenciales de Twilio no configuradas');
    }
    
    this.twilioClient = twilio(accountSid, authToken);
    
    // Inicializar cliente de OpenAI
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (!openaiApiKey) {
      throw new Error('API Key de OpenAI no configurada');
    }
    
    this.openaiClient = new OpenAI({
      apiKey: openaiApiKey
    });
    
    // Inicializar cliente MCP
    this.mcpClient = new MCPClient(
      process.env.MCP_SERVER_URL || 'https://biosanarcall.site/mcp-inspector'
    );
  }

  private initializeStats() {
    this.stats = {
      totalMessages: 0,
      activeConversations: 0,
      avgResponseTime: 0,
      successRate: 0,
      emergencyContacts: 0,
      appointmentsScheduled: 0
    };
  }

  async initialize(): Promise<void> {
    try {
      this.logger.info('Inicializando WhatsApp Agent...');
      
      // Verificar conexi√≥n con MCP
      await this.mcpClient.testConnection();
      this.logger.info('‚úÖ Conexi√≥n MCP establecida');
      
      // Verificar credenciales de Twilio
      await this.twilioClient.api.accounts(process.env.TWILIO_ACCOUNT_SID!).fetch();
      this.logger.info('‚úÖ Credenciales Twilio verificadas');
      
      // Verificar OpenAI
      await this.openaiClient.models.list();
      this.logger.info('‚úÖ API de OpenAI verificada');
      
      this.logger.info('üöÄ WhatsApp Agent inicializado correctamente');
    } catch (error) {
      this.logger.error('Error inicializando WhatsApp Agent', { error });
      throw error;
    }
  }

  async processIncomingMessage(message: IncomingMessage): Promise<string | null> {
    const startTime = Date.now();
    
    try {
      this.stats.totalMessages++;
      
      // Obtener n√∫mero de tel√©fono limpio
      const phoneNumber = this.extractPhoneNumber(message.from);
      const sessionId = `whatsapp_${phoneNumber}`;
      
      this.logger.info('Procesando mensaje entrante', {
        from: phoneNumber,
        messageLength: message.body.length,
        profileName: message.profileName
      });

      // Analizar el mensaje
      const messageAnalysis = MessageParser.parse(message.body);
      
      // Verificar si es una emergencia
      if (messageAnalysis.type === 'emergency') {
        return await this.handleEmergency(message, phoneNumber);
      }

      // Obtener o crear conversaci√≥n
      let conversation = await this.conversationManager.getConversation(sessionId);
      
      if (!conversation) {
        // Inicializar memoria en MCP
        await this.mcpClient.initializeMemory(sessionId, 'whatsapp_consultation');
        conversation = await this.conversationManager.createConversation(sessionId, phoneNumber, message.profileName);
      }

      // Agregar mensaje a la memoria
      await this.mcpClient.addToMemory(
        sessionId,
        'message',
        message.body,
        'user_input',
        { phoneNumber, profileName: message.profileName, analysis: messageAnalysis }
      );

      // Determinar la intenci√≥n del usuario
      const intent = await this.determineUserIntent(message.body, conversation);
      
      // Generar respuesta basada en la intenci√≥n
      const response = await this.generateContextualResponse(
        message.body,
        intent,
        conversation,
        messageAnalysis
      );

      // Enviar respuesta
      if (response) {
        await this.sendMessage(message.from, response);
        
        // Agregar respuesta a la memoria
        await this.mcpClient.addToMemory(
          sessionId,
          'response',
          response,
          'agent_response',
          { intent, timestamp: new Date().toISOString() }
        );

        // Actualizar conversaci√≥n
        await this.conversationManager.updateConversation(sessionId, {
          lastMessage: message.body,
          lastResponse: response,
          lastActivity: new Date(),
          messageCount: conversation.messageCount + 1
        });
      }

      // Actualizar estad√≠sticas
      const responseTime = Date.now() - startTime;
      this.updateStats(responseTime, true);

      return response;
    } catch (error) {
      this.logger.error('Error procesando mensaje', { error, message });
      this.updateStats(Date.now() - startTime, false);
      
      // Enviar mensaje de error amigable
      const errorResponse = 'Disculpa, tengo problemas t√©cnicos en este momento. Por favor intenta nuevamente en unos minutos o contacta directamente a nuestra l√≠nea de emergencias.';
      await this.sendMessage(message.from, errorResponse);
      
      return null;
    }
  }

  private async handleEmergency(message: IncomingMessage, phoneNumber: string): Promise<string> {
    this.stats.emergencyContacts++;
    
    this.logger.warn('EMERGENCIA DETECTADA', {
      from: phoneNumber,
      message: message.body,
      profileName: message.profileName
    });

    // Buscar paciente en la base de datos
    const patientInfo = await this.mcpClient.searchPatients(phoneNumber);
    
    const emergencyResponse = `üö® EMERGENCIA DETECTADA üö®

Hola ${message.profileName}, he detectado que tu mensaje indica una emergencia m√©dica.

${patientInfo ? `Te hemos identificado como: ${patientInfo.name}` : 'Para tu seguridad, por favor identif√≠cate.'}

Por favor:
1Ô∏è‚É£ Si es una emergencia que pone en riesgo la vida, llama INMEDIATAMENTE al 123
2Ô∏è‚É£ Para urgencias m√©dicas, contacta a nuestro n√∫mero de emergencias: ${process.env.EMERGENCY_PHONE}
3Ô∏è‚É£ Proporciona tu ubicaci√≥n exacta

Estoy notificando a nuestro equipo m√©dico de emergencias.

¬øNecesitas que contacte a alg√∫n familiar o conocido?`;

    // Notificar al equipo m√©dico (aqu√≠ podr√≠as integrar con un sistema de alertas)
    await this.notifyEmergencyTeam(message, phoneNumber, patientInfo);

    return emergencyResponse;
  }

  private async determineUserIntent(message: string, conversation: any): Promise<string> {
    try {
      const prompt = `
Analiza el siguiente mensaje de WhatsApp de un paciente y determina la intenci√≥n principal.
Contexto de conversaci√≥n: ${conversation.messageCount} mensajes previos.

Mensaje: "${message}"

Intenciones posibles:
- greeting: Saludo inicial
- appointment_request: Solicitar cita m√©dica
- appointment_modify: Modificar cita existente
- symptom_inquiry: Consulta sobre s√≠ntomas
- prescription_refill: Renovar receta m√©dica
- test_results: Preguntar por resultados de ex√°menes
- general_info: Informaci√≥n general sobre servicios
- payment_inquiry: Consultas sobre pagos o facturaci√≥n
- complaint: Quejas o reclamos
- emergency: Situaci√≥n de emergencia
- goodbye: Despedida

Responde solo con la intenci√≥n identificada.`;

      const response = await this.openaiClient.chat.completions.create({
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 50,
        temperature: 0.1
      });

      return response.choices[0]?.message?.content?.trim().toLowerCase() || 'general_info';
    } catch (error) {
      this.logger.error('Error determinando intenci√≥n', { error });
      return 'general_info';
    }
  }

  private async generateContextualResponse(
    message: string,
    intent: string,
    conversation: any,
    analysis: any
  ): Promise<string> {
    try {
      const sessionId = conversation.sessionId;
      
      // Obtener memoria de la conversaci√≥n
      const memoryData = await this.mcpClient.getMemory(sessionId);
      
      // Generar contexto para ChatGPT
      const systemPrompt = `Eres un asistente m√©dico virtual inteligente de Biosanarcall, especializado en atenci√≥n m√©dica por WhatsApp.

INFORMACI√ìN DEL SISTEMA:
- Nombre: Dr. IA Biosanarcall
- Especialidad: Asistente m√©dico virtual
- Capacidades: Programar citas, consultar s√≠ntomas, informaci√≥n m√©dica general

CONTEXTO DE LA CONVERSACI√ìN:
- Paciente: ${conversation.patientName || 'Sin identificar'}
- Sesi√≥n: ${sessionId}
- Mensajes previos: ${conversation.messageCount}
- Intenci√≥n detectada: ${intent}
- Memoria: ${JSON.stringify(memoryData, null, 2)}

DIRECTRICES DE RESPUESTA:
1. S√© emp√°tico, profesional y amigable
2. Usa emojis apropiados para WhatsApp
3. Mant√©n respuestas concisas (m√°ximo 300 caracteres por mensaje)
4. Si necesitas informaci√≥n m√©dica espec√≠fica, pregunta por partes
5. Para emergencias, deriva inmediatamente
6. Para citas, usa el sistema MCP para consultar disponibilidad
7. Nunca des diagn√≥sticos definitivos
8. Siempre recuerda que eres un asistente, no reemplazas consulta m√©dica

ACCIONES DISPONIBLES:
- Programar citas: Usa searchAvailabilities del MCP
- Buscar pacientes: Usa searchPatients del MCP
- Consultar m√©dicos: Usa getDoctors del MCP
- Obtener informaci√≥n m√©dica: Usa el conocimiento base

Responde al siguiente mensaje del paciente:`;

      const userPrompt = `Mensaje del paciente: "${message}"

Por favor, genera una respuesta apropiada considerando el contexto y la intenci√≥n detectada.`;

      const response = await this.openaiClient.chat.completions.create({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 500,
        temperature: 0.7
      });

      let aiResponse = response.choices[0]?.message?.content?.trim() || 'Lo siento, no pude procesar tu mensaje. ¬øPodr√≠as reformularlo?';

      // Post-procesar respuesta para intenciones espec√≠ficas
      if (intent === 'appointment_request') {
        aiResponse = await this.enhanceAppointmentResponse(aiResponse, sessionId);
      } else if (intent === 'symptom_inquiry') {
        aiResponse = await this.enhanceSymptomResponse(aiResponse, sessionId);
      }

      return aiResponse;
    } catch (error) {
      this.logger.error('Error generando respuesta contextual', { error });
      return 'Disculpa, tengo dificultades para procesar tu mensaje. ¬øPodr√≠as intentar nuevamente?';
    }
  }

  private async enhanceAppointmentResponse(response: string, sessionId: string): Promise<string> {
    try {
      // Consultar disponibilidades del d√≠a
      const today = new Date().toISOString().split('T')[0];
      const availabilities = await this.mcpClient.searchAvailabilities(today);
      
      if (availabilities && availabilities.length > 0) {
        const availableSlots = availabilities.slice(0, 3).map((slot: any) => 
          `üìÖ ${slot.date} a las ${slot.start_time} - Dr. ${slot.doctor_name}`
        ).join('\n');
        
        response += `\n\nDisponibilidad hoy:\n${availableSlots}\n\n¬øTe interesa alguno de estos horarios?`;
      }
      
      return response;
    } catch (error) {
      this.logger.error('Error mejorando respuesta de citas', { error });
      return response;
    }
  }

  private async enhanceSymptomResponse(response: string, sessionId: string): Promise<string> {
    try {
      // Agregar disclaimers m√©dicos
      const disclaimer = '\n\n‚ö†Ô∏è *Importante*: Esta informaci√≥n es orientativa. Para un diagn√≥stico preciso, consulta con un m√©dico.';
      
      return response + disclaimer;
    } catch (error) {
      this.logger.error('Error mejorando respuesta de s√≠ntomas', { error });
      return response;
    }
  }

  async sendMessage(to: string, message: string): Promise<any> {
    try {
      const result = await this.twilioClient.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER!,
        to: to,
        body: message
      });

      this.logger.info('Mensaje enviado exitosamente', {
        to: to,
        messageId: result.sid,
        messageLength: message.length
      });

      return result;
    } catch (error) {
      this.logger.error('Error enviando mensaje', { error, to, message });
      throw error;
    }
  }

  private extractPhoneNumber(from: string): string {
    // Extraer n√∫mero de tel√©fono del formato whatsapp:+1234567890
    return from.replace('whatsapp:', '').replace('+', '');
  }

  private async notifyEmergencyTeam(message: IncomingMessage, phoneNumber: string, patientInfo: any): Promise<void> {
    // Aqu√≠ puedes implementar notificaciones al equipo m√©dico
    // Por ejemplo: email, SMS, webhook a sistema hospitalario, etc.
    this.logger.warn('NOTIFICACI√ìN DE EMERGENCIA', {
      patient: patientInfo?.name || 'Desconocido',
      phone: phoneNumber,
      message: message.body,
      timestamp: new Date().toISOString()
    });
  }

  private updateStats(responseTime: number, success: boolean): void {
    // Actualizar tiempo promedio de respuesta
    this.stats.avgResponseTime = (this.stats.avgResponseTime + responseTime) / 2;
    
    // Actualizar tasa de √©xito
    if (success) {
      this.stats.successRate = ((this.stats.successRate * (this.stats.totalMessages - 1)) + 100) / this.stats.totalMessages;
    } else {
      this.stats.successRate = (this.stats.successRate * (this.stats.totalMessages - 1)) / this.stats.totalMessages;
    }
  }

  async getStats(): Promise<ConversationStats> {
    this.stats.activeConversations = await this.conversationManager.getActiveConversationsCount();
    return { ...this.stats };
  }
}